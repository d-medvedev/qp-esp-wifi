/*$file${../main::sensor.h} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
/*
* Model: wifi.qm
* File:  ${../main::sensor.h}
*
* This code has been generated by QM 5.2.4 <www.state-machine.com/qm>.
* DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
*
* SPDX-License-Identifier: GPL-3.0-or-later
*
* This generated code is open source software: you can redistribute it under
* the terms of the GNU General Public License as published by the Free
* Software Foundation.
*
* This code is distributed in the hope that it will be useful, but WITHOUT
* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
* FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
* more details.
*
* NOTE:
* Alternatively, this generated code may be distributed under the terms
* of Quantum Leaps commercial licenses, which expressly supersede the GNU
* General Public License and are specifically designed for licensees
* interested in retaining the proprietary status of their code.
*
* Contact information:
* <www.state-machine.com/licensing>
* <info@state-machine.com>
*/
/*$endhead${../main::sensor.h} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
#ifndef SENSOR_H
#define SENSOR_H

enum SensorSignals {
    START_MEAS_SIG= Q_USER_SIG,
    STOP_MEAS_SIG,
    SEND_MEAS_SIG,
    SET_MEAS_INVL_SIG,
};

typedef struct sensor_data
{
    float temperature;
    float pressure;
} sensor_data_t;

/*$declare${AOs::Sensor} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/

/*${AOs::Sensor} ...........................................................*/
typedef struct Sensor {
/* protected: */
    QActive super;

/* public: */

/* private: */
    uint32_t meas_interval_sec;

/* public: */
    sensor_data_t sensor_data;

/* private: */
    QTimeEvt measTimeEvt;
} Sensor;
extern Sensor Sensor_obj;

/* protected: */
QState Sensor_initial(Sensor * const me, void const * const par);
QState Sensor_active(Sensor * const me, QEvt const * const e);
QState Sensor_idle(Sensor * const me, QEvt const * const e);
QState Sensor_read_data(Sensor * const me, QEvt const * const e);
/*$enddecl${AOs::Sensor} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
/*$declare${Shared::SensorEvt} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/

/*${Shared::SensorEvt} .....................................................*/
typedef struct {
/* protected: */
    QEvt super;

/* public: */
    float temperature;
    float pressure;
} SensorEvt;
/*$enddecl${Shared::SensorEvt} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
/*$declare${Shared::AO_Sensor} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/

/*${Shared::AO_Sensor} .....................................................*/
extern QActive * const AO_Sensor;
/*$enddecl${Shared::AO_Sensor} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
/*$declare${Shared::Sensor_ctor} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/

/*${Shared::Sensor_ctor} ...................................................*/
void Sensor_ctor(void);
/*$enddecl${Shared::Sensor_ctor} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/

#endif // SENSOR_H
